webpack

1. webpack是什么
    是一个js应用程序的静态打包工具

2. webpack是如何工作的
    将项目当成一个整体，通过给定的入口(entry),从该入口文件开始，找到项目中所有的以来
    经过模块依赖加载，分析，打包，三个流程，最终将打包可以直接运行的一个或多个bundle

3. 安装webpack
--save  ==>  -S 安装在dependencies依赖中
生产环境的依赖，最终是要打包在成品中

--save-dev ==> -D 安装在devDependencies依赖中
开发环境的依赖，不需要要打包在成品中

cnpm i webpack webpack-cli -D

4. 无配置文件打包
 写好js后，在package.json中的scripts属性里添加："start":"webpack index .js"
 在项目的根目录使用 npm start
 
 打包成功后显示的信息：
    hash：打包成功后产生的唯一hash值
    version：webpack的版本号
    time: 打包耗时
    build at： 打包时间
    Asset：  打包生成的静态文件
    Size：   静态文件的大小
    Chunks： 代码块
    Chunk Name：  chunk对应的名称
默认在项目的根目录下生成一个dist文件夹，；里面有一个mian.js文件，该文件就是打包压缩后的文件

5. 常用选项
    --mode 指定打包的模式(development,production)
    --config 指定一个webpack的配置文件
    --watch 开启监听模式
    --hot 开启模块热更新
    --progress 显示模块更新进度

6. 使用配置文件webpack.config.js
    webpack配置文件有4个核心概念：
        entry，呕吐，loader，plugins
    1) entry
    表示入口文件，从那个文件开始查找或间接地依赖并打包
    可以接收的参数：字符串，字符串数组，对象
    entry: "path"
        已提供的文件为入口
    entry:['path1','path2']
        多个文件为路口，最终打包为一个文件

    entry: {
        chunkName:'path1',
        chunkName:'path2'
    }
    多个文件入口，打包生成多个文件，文件名就是chunkName

    2) output
        指定打包生成的文件的保存路劲
        output中有三个常用的属性
            path：指定bundle输出的存放路径(默认dist)path.resolve(__dirname,"文件夹名称")
            filname：指定生成的bundle的名称(默认main.js)
            publicPath:指定一个在浏览器中引用的url
        
        如果入口文件有多个，最终生成多个bundles
            a) 如果没有设置filename，则最终生成的bundle名就是对应的chunkName
            b) 如果设置了filename具体的文件名，则报错，可以使用占位符来代替
                [name]： 对应的是entry设置的ke(chunkName)
                [hash]: 对应的是每次打包完成时产生的唯一的hash值，可以指定长度[hash:6]

                [chunhash]: chunk对应生成的hash，根据chunkName生成对应的hash，只要entry中的入口没有变化，chunkhash就没有变化

                [contenthash] : 把css样式从js中抽离出来，就可以使用contenthash来命名
    
    3) plugins 插件
        plugins是webpack中的重要组成部分，可以解决loader解决不了的问题
        html-webpack-plugin：使用HTML模板生成一个简单的HTML页面
        clean-webpack-plugin：清除上一次的

    4) loader
    加载器
    webpack将每一个文件当成一个模块，模块可以是任意的静态资源文件，但是webpack只认识js，不认识其他类型的资源文件
    loader就是用来帮助webpack处理js以外的任意静态资源文件
    处理不同类型的静态资源需要使用不同的loader
    
    如：css或less文件
    css-loader 让webpack认识到css文件
    style-loader讲样式内联到页面中
    less-loader 认识less文件
    loader需要单独安装并且配置，配置参数：
    test：使用正则匹配文件类型(后缀名)
    use：使用哪个或哪些loader

    5) 将css打包成一个单独的文件
    mini-css-extract-plugin

    6) css的模块化
        css的模块化就是将js的模块化思想带入到css中
        所有的类名都只作用于当前模块，这样就不必担心在不同模块中具有相同类名造成的覆盖问题

    7) 多页面配置
    html-webpack-plugin
    每new一个实例就会创建一个对应的HTML页面

    8) webpack的扩展配置
        resolve: 帮助webpack快速查找以来，通过配置：
            extensions：后缀名
            alias: 别名 简化引用路径

     9) 静态资源文件的处理
    静态资源文件指前端中的图片，字体文件，音频视频等等，webpack也会将这类文件当成模块来进行打包处理
      file-loader 解决图片引用路径问题
      url-loader 将图片转换为base64DataUrl格式直接打包到js中

    10) babel配置
        10.1 babel是js的编译器，通过babel可以将ES6的语法转换成浏览器可识别的语法

        10.2 babel的基本安装包和插件
            @babel/core: babel的核心代码
            @babel/cli: babel的命令行，执行babel命令
            @babel/preset-env: 预设，这是个预设组合插件，包含了所有的语法转换插件
            @babel/plugin-transform-runtime:可以重复使用babel注入的程序，提供一个统一的模块化安装
        
        10.3 配置文件
            .babelrc
                "presets": [
                "@babel/preset-env"
                ]
    10.4 polyfill(垫片)
      babel只负责语法的转换，但是新的api是转换不了的，比如promise，Object.assign()，这时候就需要使用polyfill
      babel的polyfill为当前环境提供一个垫片，用于垫平不同浏览器或不同环境下的差异
      babel的编译过程就是将语法统一，通常就是将高版本的语法转换成低版本的语法
      polyfill就是让所有的浏览器支持所有的特性

      生产模式安装
         cnpm i -S @babel/polyfill

      polyfill的问题：
        会直接修改内置的原型，造成全局污染无法按需引入，加载所有的polyfill会导致打包文件太大

    使用babel-runtime解决以上问题，但是也不完美
        生产模式安装babel-runtime
        cnpm i -S @babel/runtime
        cnpm i -S core-js@3

    11) webpack-dev-server插件
        搭建一个本地开发环境
        webpack提供了一个本地开发环境，这个本地服务是基于express创建的
        安装：
            cnpm i -D webpack-dev-server
        该插件提供的功能：
            1) reloading:触发了浏览器自动刷新的功能
            2) 浏览器提示错误
            3) 模块热更新，在不刷新页面的情况下更新代码
            4) 接口的代理，请求代理

     12) source-map 代码调试
        开发模式 devtool: "cheap-module-eval-source-map"

        生产模式 devtool: "source-map"

    13) vue的处理
        开发依赖： vue-loader vue-template-compiler vue-style-loader
        生产依赖： vue

    14) 环境的拆分
        在webpack中为了方便开发调试和上线，一般会设置两个webpack配置文件
        将webpack.config.js配置文件拆分为3部分：
        webpack.base.js: 基础配置
        webpack.dev.js: 开发环境的配置
        webpack.pro.js: 生产环境的配置

    15) 判断当前环境是开发还是生产
        安装cross-env 设置环境变量
        cnpm i -D cross-env

    16) webpack-merge
        配置文件的合并
        cnpm i -D webpack-merge


